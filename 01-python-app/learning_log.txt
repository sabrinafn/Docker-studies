Learning Log WIP

Project: 
Cat Collection App â€“ Containerized Python Application with Streamlit and FastAPI

Goal: 

- Containerize and run a Python application
- Set up a local environment to develop a Python application using containers

Technologies Used: 
Python, Streamlit, FastAPI, PostgreSQL

Commands Learned:
 docker compose build -> build the image from the instructions given on the Dockerfile for each server requested in the compose.yaml
 docker compose up -> execute the container and run the app


Concepts Tested:

[x] Build / rebuild images

[x] Volumes & bind mounts

[x] Environment variables

[x] Networking / linking containers

[ ] Multi-stage builds

[ ] Healthchecks

[ ] Logging


Key Learnings:
- Learned how to containerize a full Python stack, including backend, frontend, and database.
- Setting up a Compose file to add a local database and persist data. 
- How to use Compose Watch to automatically rebuild and run the container when the code is updated.
- Discovered how limited is Streamlit

Source:
https://docs.docker.com/guides/python/
https://fastapi.tiangolo.com/#create-it
https://www.w3schools.com/postgresql/
https://medium.com/@kevinkoech265/a-guide-to-connecting-postgresql-and-pythons-fast-api-from-installation-to-integration-825f875f9f7d
https://docs.streamlit.io/get-started/fundamentals/main-concepts
https://arnaudmiribel.github.io/streamlit-extras/

